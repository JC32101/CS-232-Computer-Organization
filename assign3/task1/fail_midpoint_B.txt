I used [-3] and [-23] to fail midpoint_B test. It failed because [-3] is signed binary [0b1111 1111 1111 1111 11111 1111 1111 1101] and [-23] is signed binary [0b1111 1111 1111 1111 1111 1111 1110 1001], so the midpoint of [-3] and [-23] is expected to be [-13] = signed binary [0b1111 0011]. However, midpoint_B failed when it computes [((unsigned int)x + (unsigned int)y) >> 1] because its result is [0b1111 1111 1111 1111 11111 1111 1111 1101 + 0b1111 1111 1111 1111 1111 1111 1110 1001 = 0b1111 1111 1111 1111 1111 1111 1110 0110 >> 1 = 0b0111 1111 1111 1111 1111 1111 1111 0011]. The result of the equation is [0b0111 1111 1111 1111 1111 1111 1111 0011] = [2147483635], which is not the midpoint of [-3] and [-23]. During the calculation, the result will have an overflow and the right shift will add a 0 when shifted, since it's unsigned instead of signed. This results the answer to be positive.
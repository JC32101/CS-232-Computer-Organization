1.What instruction is “int a, b, c, d;” converted to? 
“int a, b, c, d;” was converted to subl $16,%esp.

2.Does “int a, b, c, d;” shrink or grow the stack? How many bytes are allocated on stack for a, b, c, and d? Explain them using instruction from question 1.
According to the instruction of “int a, b, c, d;”, the stack memory shrinks by 16 bytes. The instruction indicates that the addresses lower than esp are unused stack space, and so it is making spaces for the 4 integers. 4 bytes are then allocated each time for a, b, c, and d in the stack.

3.What instruction is “b=2;” converted to? How is the address of variable b formed in the instruction?
The instruction for "b=2" is converted to movl $2,-8(%ebp). According to the instruction, it takes the value of $2 and stores the value in ebp at ebp's address that's subtracted by 8.

4.Based on the instructions converted from four assignments, can we claim the declaration order determines the allocation order? For instance, a is declared before b, does it mean a is to be allocated before b on stack? Verify your theory by changing the declaration to “int a, c, b, d;”
If we changed the declared order, we will notice that the address of each assigned variable also changes according to the declared order. Therfore, we can conclude that the allocation order is determined by the declaration order.